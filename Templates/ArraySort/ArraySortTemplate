    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key = lambda i:i[0])

or

tasks = [[1,2], [4,3]]
# sort using start time
tasks = sorted((start, end, index) for index, (start, end) in enumerate(tasks))

or

class Car:
    def __init__(self, pos, speed):
        self.pos = pos
        self.speed = speed

    def __lt__(self, other):
        return self.pos < other.pos
    

Cars.sort()

or

# [[1,2],[2,3],[3,4],[1,3]]
# [[1,2],[1,3],[2,3],[3,4]]
from functools import cmp_to_key
def compare(i1, i2):
    if i1[0] != i2[0]:    return i1[0] - i2[0]
    else:   return i1[1] - i2[1]

intervals.sort(key=cmp_to_key(compare))
